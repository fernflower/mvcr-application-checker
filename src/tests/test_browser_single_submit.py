# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
import time
from selenium.common.exceptions import (
    WebDriverException,
    ElementClickInterceptedException,
    TimeoutException,
    NoSuchElementException,
)
import fake_useragent


class TestMVCR:
    def setup_method(self, method):
        useragent = fake_useragent.UserAgent(browsers=["firefox"]).random
        # chrome_options = webdriver.ChromeOptions()
        # chrome_options.add_argument(f"user-agent={user_agent}")
        # self.driver = webdriver.Chrome(options=chrome_options)

        # configure display & options
        options = webdriver.firefox.options.Options()
        options.set_preference("intl.accept_languages", "cs-CZ")
        options.set_preference("http.response.timeout", 10)
        options.set_preference("general.useragent.override", useragent)
        options.set_preference("dom.webdriver.enabled", False)
        options.set_preference("useAutomationExtension", False)
        self.driver = webdriver.Firefox(options=options)
        self.vars = {}

    def teardown_method(self, method):
        self.driver.quit()

    def test_mVCR(self):
        self.driver.set_window_size(1936, 1056)
        # self.driver.set_window_size(1420, 1080)
        self.driver.get("https://frs.gov.cz/informace-o-stavu-rizeni/")
        WebDriverWait(self.driver, 10).until(
            lambda x: x.find_element(By.CLASS_NAME, "wrapper__form"),
            message="Body didn't load in time",
        )
        cookies = self.driver.find_element_by_xpath('//button[@class="button button__primary" and text()="Souhlasím se všemi"]')
        try:
            cookies.click()
        except ElementClickInterceptedException:
            pass
        # self.driver.find_element(By.CSS_SELECTOR, ".flex > .button__primary").click()
        self.driver.find_element(By.XPATH, "//input[@placeholder='12345']").click()
        self.driver.find_element(By.XPATH, "//input[@placeholder='12345']").send_keys("12345")
        self.driver.find_element(By.XPATH, "//input[@placeholder='XX']").click()
        self.driver.find_element(By.XPATH, "//input[@placeholder='XX']").send_keys("4")
        # Trigger type dropdown menu to appear
        menu1 = self.driver.find_element_by_xpath(
            "//div[contains(@class, 'react-select') and ancestor::div[contains(@style, 'width: 140px;')]]"
        )
        menu1.find_element_by_xpath("//div[contains(@class, 'react-select__control')]").click()

        time.sleep(0.5)
        # Locate and select the type dropdown by placeholder
        scroll1 = self.driver.find_element_by_xpath("//div[contains(@class, 'react-select__menu')]")
        scroll1.find_element_by_xpath(".//div[text()='DP']").click()

        # Trigger year dropdown menu to appear
        menu2 = self.driver.find_element_by_xpath(
            "//div[contains(@class, 'react-select') and ancestor::div[contains(@style, 'width: 100px;')]]"
        )
        menu2.find_element_by_xpath(".//div[contains(@class, 'react-select__control')]").click()

        time.sleep(0.5)
        # Locate and select the year dropdown by placeholder
        scroll2 = menu2.find_element_by_xpath(".//div[contains(@class, 'react-select__menu')]")
        scroll2.find_element_by_xpath(".//div[text()='2021']").click()

        # Click submit
        self.driver.find_element(By.CSS_SELECTOR, ".button--large").click()
        element = self.driver.find_element(By.CSS_SELECTOR, ".button--large")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).perform()
        WebDriverWait(self.driver, 5).until(
            lambda x: x.find_element(By.CLASS_NAME, "alert__content"),
            message="Status field wasn't found",
        )
        element = self.driver.find_element_by_class_name("alert__content")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).perform()
        time.sleep(5)
